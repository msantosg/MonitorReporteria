CREATE DATABASE DB_REPORTERIA
GO

USE DB_REPORTERIA
GO

CREATE TABLE AREA_RESPONSABLE
(
	ID_AREA INT NOT NULL,
	DSAREA NVARCHAR(100),
	CONSTRAINT PK_AREA_RESPONSABLE PRIMARY KEY(ID_AREA)
);
GO

CREATE TABLE AREA_SOLICITANTE
(
	ID_AREA INT NOT NULL,
	DSAREA NVARCHAR(100),
	CONSTRAINT PK_AREA_SOLICITANTE PRIMARY KEY(ID_AREA)
);
GO

CREATE TABLE USUARIO
(
	ID_USUARIO NVARCHAR(50) NOT NULL,
	USUARIO NVARCHAR(200),
	CONSTRAINT PK_USUARIO PRIMARY KEY(ID_USUARIO)
);
GO

CREATE TABLE CNF_CONFIGURACION
(
	ID_CONFIGURACION INT NOT NULL,
	USUARIO NVARCHAR(50) NOT NULL,
	AREA_RESPONSABLE INT NOT NULL,
	AREA_SOLICITANTE INT NOT NULL,
	CORREO NVARCHAR(50),
	DESCRIPCION NVARCHAR(MAX),
	PERIODICIDAD NVARCHAR(25),
	ANTICIPACION INT,
	SANCION DECIMAL(18,2),
	ESTADO INT,
	FECHA_REGISTRO DATE,
	USUARIO_MODIFICACION NVARCHAR(50),
	FECHA_MODIFICACION DATE,
	DIAPUBLICACION DATE,
	CONSTRAINT PK_CNF_CONFIGURACION PRIMARY KEY(ID_CONFIGURACION),
	CONSTRAINT FK_AREA_RESPONSABLE FOREIGN KEY(AREA_RESPONSABLE) REFERENCES AREA_RESPONSABLE(ID_AREA),
	CONSTRAINT FK_AREA_SOLICITANTE FOREIGN KEY(AREA_SOLICITANTE) REFERENCES AREA_SOLICITANTE(ID_AREA),
	CONSTRAINT FK_USUARIO FOREIGN KEY(USUARIO) REFERENCES USUARIO(ID_USUARIO)
);
GO

CREATE TABLE CNF_EJECUCION
(
	ID_EJECUCION INT NOT NULL,
	ID_CONFIGURACION INT NOT NULL,
	DESCRIPCION NVARCHAR(MAX),
	FECHA_COMPROMISO DATE,
	IMAGEN NVARCHAR(MAX),
	FECHA_REGISTRO_IMAGEN DATE,
	ESTADO INT,
	FECHA_REGISTRO DATE,
	CONSTRAINT PK_CNF_EJECUCION PRIMARY KEY(ID_EJECUCION),
	CONSTRAINT FK_CNF_CONFIG FOREIGN KEY(ID_CONFIGURACION) REFERENCES CNF_CONFIGURACION(ID_CONFIGURACION)
);
GO

CREATE TABLE CNF_NOTIFICACION
(
	ID_EJECUCION INT NOT NULL,
	ID_CONFIGURACION INT NOT NULL,
	CORREO NVARCHAR(50),
	ESTADO INT,
	FECHA_ENVIO DATE,
	INTENTOS INT,
	CONSTRAINT PK_CNF_NOTIFICACION PRIMARY KEY(ID_EJECUCION, ID_CONFIGURACION),
	CONSTRAINT FK_CNF_NOTI_EJEC FOREIGN KEY(ID_EJECUCION) REFERENCES CNF_EJECUCION(ID_EJECUCION),
	CONSTRAINT FK_CNF_NOTI_CONF FOREIGN KEY(ID_CONFIGURACION) REFERENCES CNF_CONFIGURACION(ID_CONFIGURACION)
);
GO

create proc sp_carga_evidencia
	@idconf int,
	@idejec int,
	@img nvarchar(max)
as
	update CNF_EJECUCION set IMAGEN = @img, FECHA_REGISTRO_IMAGEN = GETDATE(), ESTADO = 1
	where ID_CONFIGURACION = @idconf and ID_EJECUCION = @idejec;

	update CNF_CONFIGURACION set ESTADO = 0
	where ID_CONFIGURACION = @idconf;
go

create proc sp_cnf_ejecucion
as
declare @id_ejecucion int

select @id_ejecucion = ISNULL(MAX(ID_EJECUCION), 0) + 1 FROM CNF_EJECUCION;

insert into CNF_EJECUCION (ID_EJECUCION, ID_CONFIGURACION, DESCRIPCION, FECHA_COMPROMISO, ESTADO, FECHA_REGISTRO)
select @id_ejecucion, ID_CONFIGURACION, DESCRIPCION, DIAPUBLICACION, 0, GETDATE()
from CNF_CONFIGURACION
where estado = 0 and diapublicacion = cast(getdate() as date);

update CNF_CONFIGURACION set ESTADO = 1, FECHA_MODIFICACION = GETDATE(), USUARIO_MODIFICACION = 'PROCESO AUTOMÁTICO'
where estado = 0 and diapublicacion = cast(getdate() as date);
go

create proc sp_insoact_configuracion
	@USUARIO nvarchar(50),
	@AREA_RESPONSABLE NVARCHAR(100),
	@AREA_SOLICITANTE NVARCHAR(100),
	@CORREO NVARCHAR(50),
	@DESCRIPCION NVARCHAR(MAX),
	@PERIODICIDAD NVARCHAR(25),
	@ANTICIPACION INTEGER,
	@DIAPUBLICACION DATE,
	@SANCION DECIMAL(18,2),
	@ESTADO INT,
	@USUARIOMODIFICA NVARCHAR(50),
	@TIPOTRANS INT,
	@ID_CONFIGURACION INT,
	@ID_CNF INT OUTPUT
as
declare @id_config int

	
	if(@TIPOTRANS = 1) 
	begin
		select @id_config = ISNULL(MAX(ID_CONFIGURACION), 0) + 1 FROM CNF_CONFIGURACION;
		insert into CNF_CONFIGURACION (ID_CONFIGURACION, USUARIO, AREA_RESPONSABLE, AREA_SOLICITANTE, CORREO, DESCRIPCION, PERIODICIDAD,
		ANTICIPACION, SANCION, ESTADO, FECHA_REGISTRO, DIAPUBLICACION)
		values
		(@id_config, @USUARIO, @AREA_RESPONSABLE, @AREA_SOLICITANTE, @CORREO, @DESCRIPCION, @PERIODICIDAD, @ANTICIPACION, @SANCION,
		@ESTADO, GETDATE(), @DIAPUBLICACION);		
	end;

	if(@TIPOTRANS = 2)
	begin
		update CNF_CONFIGURACION set USUARIO = @USUARIO, AREA_RESPONSABLE = @AREA_RESPONSABLE,
		AREA_SOLICITANTE = @AREA_SOLICITANTE, CORREO = @CORREO, DESCRIPCION = @DESCRIPCION,
		PERIODICIDAD = @PERIODICIDAD, ANTICIPACION = @ANTICIPACION, DIAPUBLICACION = @DIAPUBLICACION, SANCION = @SANCION,
		USUARIO_MODIFICACION = @USUARIOMODIFICA, FECHA_MODIFICACION = GETDATE()
		where ID_CONFIGURACION = @ID_CONFIGURACION;
	end;
go

create proc sp_trae_notificaciones
as
declare
	@ID_CONF INT,
	@ID_EJEC INT, 
	@CORREO NVARCHAR(50),
	@DESCRIPCION NVARCHAR(MAX),
	@count int,
	@RESUMEN_RPT NVARCHAR(MAX) = '',
	@USUARIO NVARCHAR(50),
	@USUARIOAUX NVARCHAR(50)
DECLARE C_NOTIFICA CURSOR FOR 
select a.ID_CONFIGURACION, b.ID_EJECUCION, a.CORREO, a.DESCRIPCION, a.USUARIO from CNF_CONFIGURACION as a
inner join CNF_EJECUCION as b on b.ID_CONFIGURACION = a.ID_CONFIGURACION
where a.ESTADO = 1 and DATEDIFF(DAY, a.DIAPUBLICACION, GETDATE()) <= a.ANTICIPACION
order by a.USUARIO;
DECLARE @ASUNTO VARCHAR(MAX)	= 'Notificacion'
DECLARE @TITULO VARCHAR(MAX)	= 'Reportes Pendientes'
DECLARE @PROFILE VARCHAR(MAX)	= 'Administracion Solidum'
DECLARE @RECEPTORES VARCHAR(MAX) = 'edcanel@hotmail.com;mariosantos1001@hotmail.com;erick.chajon@icp-gt.com'
DECLARE @CONTENIDO VARCHAR(MAX) = 'Prueba de concepto'


OPEN C_NOTIFICA
FETCH NEXT FROM C_NOTIFICA INTO @ID_CONF, @ID_EJEC, @CORREO, @DESCRIPCION, @USUARIO
SELECT @USUARIOAUX = @USUARIO
WHILE @@FETCH_STATUS = 0
BEGIN
	
	if(@USUARIOAUX = @USUARIO)
	begin
		SELECT @RESUMEN_RPT = @RESUMEN_RPT + ', ' + @DESCRIPCION
		print @RESUMEN_RPT;
	end
	else
	begin
		select @CONTENIDO = 'Estimado Usuario. Atentamente nos dirigimos a usted para notificarle del vencimiento del reporte asignado ' + @RESUMEN_RPT + '. Atentamente, Sistema de Notificación Automática.';
		print(@CONTENIDO);
		print(@RECEPTORES);
		print(@TITULO);
		print(@PROFILE);
		print(@ASUNTO);
		print(@RESUMEN_RPT);
		/*EXEC vhur.dbo.SEND_MAIL_GENERIC
				  @ASUNTO,
				  @TITULO,
				  @CONTENIDO,
				  @RECEPTORES,
				  '',
				  11,
				  @PROFILE*/
	end

	select @count = count(*) from CNF_NOTIFICACION where ID_CONFIGURACION = @ID_CONF and ID_EJECUCION = @ID_EJEC;
	if(@count=0) 
		insert into CNF_NOTIFICACION values (@ID_EJEC, @ID_CONF, @CORREO, 1, GETDATE(), 1);
	
	if(@count>0)
		update CNF_NOTIFICACION set FECHA_ENVIO = GETDATE(), INTENTOS = INTENTOS + 1 where ID_EJECUCION = @ID_EJEC and ID_CONFIGURACION = @ID_CONF;
	
	FETCH NEXT FROM C_NOTIFICA INTO @ID_CONF, @ID_EJEC, @CORREO, @DESCRIPCION, @USUARIO
END
CLOSE C_NOTIFICA
DEALLOCATE C_NOTIFICA
go

create proc sp_ver_evidencia
	@idconf int,
	@idejec int
as
	select IMAGEN
	from CNF_EJECUCION
	where ID_CONFIGURACION = @idconf and ID_EJECUCION = @idejec;
go

create proc sp_ver_reportes_vencidos
as
update CNF_EJECUCION set estado = 2
where estado = 0 and DATEDIFF(day, FECHA_REGISTRO, cast(getdate() as date)) > 0;

update CNF_CONFIGURACION set ESTADO = 2
where estado = 1
and ID_CONFIGURACION in (select ID_CONFIGURACION from CNF_EJECUCION where estado in (2))
go

create proc sp_verareas_res
as
select -1 as llave, 'Seleccione Area' as valor
union all
select id_area as llave, dsarea as valor from AREA_RESPONSABLE;
go

create proc sp_verareas_soli
as
select -1 as llave, 'Seleccione Area' as valor
union all
select id_area as llave, dsarea as valor from AREA_SOLICITANTE
go

create proc sp_verconfiguracionrpt
as
select ID_CONFIGURACION, us.USUARIO AS USUARIO, ar.DSAREA AS AREA_RESPONSABLE, aso.DSAREA AS AREA_SOLICITANTE, CORREO, DESCRIPCION, PERIODICIDAD, ANTICIPACION,
convert(nvarchar(30), DIAPUBLICACION,103) AS FECHA_PUBLICACION, SANCION, CASE ESTADO WHEN 0 THEN 'PENDIENTE' WHEN 1 THEN 'FINALIZADO' WHEN 2 THEN 'VENCIDO' ELSE ''END as ESTADO, 
convert(nvarchar(30), FECHA_REGISTRO, 103) as FECHA_REGISTRO,
USUARIO_MODIFICACION, convert(nvarchar(30), FECHA_MODIFICACION, 103) as FECHA_MODIFICACION from CNF_CONFIGURACION cc
inner join AREA_RESPONSABLE ar on ar.id_area = cc.AREA_RESPONSABLE
inner join AREA_SOLICITANTE aso on aso.id_area = cc.AREA_SOLICITANTE
inner join USUARIO us on us.ID_USUARIO = cc.USUARIO
where estado <> 3;
go

create proc sp_vermonitor
as
select ID_CONFIGURACION, ID_EJECUCION, DESCRIPCION, convert(nvarchar(30), FECHA_COMPROMISO, 103) as FECHA_COMPROMISO, CASE ESTADO WHEN 0 THEN 'PENDIENTE DE CARGA' ELSE 'EVIDENCIA CARGADA' END AS IMAGEN, FECHA_REGISTRO_IMAGEN as FECHA_REG_IMG,  
CASE ESTADO WHEN 0 THEN 'PENDIENTE' WHEN 1 THEN 'FINALIZADO' ELSE 'VENCIDO' END as ESTADO, convert(nvarchar(30), FECHA_REGISTRO, 103) as FECHA_REGISTRO
from CNF_EJECUCION;
go

create PROC sp_verusuarios
as
select '...' as llave, 'Seleccione Usuario' as valor
union all
select ID_USUARIO as llave, usuario as valor from USUARIO;
go

create proc sp_eliminaconf
@id_conf int
as
	update CNF_CONFIGURACION set ESTADO = 3 where ID_CONFIGURACION = @id_conf;
go

INSERT INTO USUARIO VALUES ('MSANTOS', 'MARIO SANTOS');
INSERT INTO USUARIO VALUES ('ECANEL', 'EDUARDO CANEL');
INSERT INTO USUARIO VALUES ('ECHAJON', 'ERICK CHAJON');

INSERT INTO AREA_RESPONSABLE VALUES (1, 'OFICINA DE CUMPLIMIENTO');
INSERT INTO AREA_RESPONSABLE VALUES (2, 'SECRETARIA DE GERENCIA GENERAL');
INSERT INTO AREA_RESPONSABLE VALUES (3, 'UNIDAD DE RIESGOS');
INSERT INTO AREA_RESPONSABLE VALUES (4, 'DIRECCIÓN ADMINISTRATIVA');
INSERT INTO AREA_RESPONSABLE VALUES (5, 'DIRECCIÓN FINANCIERA');
INSERT INTO AREA_RESPONSABLE VALUES (6, 'DIRECCIÓN DE SISTEMAS');

INSERT INTO AREA_SOLICITANTE VALUES (1, 'SUPERINTENDENCIA DE BANCOS');
INSERT INTO AREA_SOLICITANTE VALUES (2, 'ORGANISMO JUDICIAL');
INSERT INTO AREA_SOLICITANTE VALUES (3, 'MINISTERIO PÚBLICO');
INSERT INTO AREA_SOLICITANTE VALUES (4, 'INSTITUTO DE VERIFICACIÓN ESPECIAL');